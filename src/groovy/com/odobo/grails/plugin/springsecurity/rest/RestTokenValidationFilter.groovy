package com.odobo.grails.plugin.springsecurity.rest

import groovy.util.logging.Slf4j
import org.springframework.security.core.AuthenticationException
import org.springframework.security.core.context.SecurityContextHolder
import org.springframework.security.web.authentication.AuthenticationFailureHandler
import org.springframework.security.web.authentication.AuthenticationSuccessHandler
import org.springframework.web.filter.GenericFilterBean

import javax.servlet.FilterChain
import javax.servlet.ServletException
import javax.servlet.ServletRequest
import javax.servlet.ServletResponse
import javax.servlet.http.HttpServletRequest
import javax.servlet.http.HttpServletResponse

/**
 * This filter starts the token validation flow. It extracts the token from the configured header name, and pass it to
 * the {@link RestAuthenticationProvider}.
 *
 * If successful, the result is stored in the security context and the response is generated by the
 * {@link AuthenticationSuccessHandler}. Otherwise, an {@link AuthenticationFailureHandler} is called.
 */
@Slf4j
class RestTokenValidationFilter extends GenericFilterBean {

    String headerName

    RestAuthenticationProvider restAuthenticationProvider

    AuthenticationSuccessHandler authenticationSuccessHandler
    AuthenticationFailureHandler authenticationFailureHandler

    String endpointUrl

    @Override
    void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
        HttpServletRequest servletRequest = request

        log.debug "Looking for a token value in the header '${headerName}'"
        String tokenValue = servletRequest.getHeader(headerName) ?: servletRequest.getParameter("token")

        if (tokenValue) {
            log.debug "Token found: ${tokenValue}"

            try {
                log.debug "Trying to authenticate the token"
                RestAuthenticationToken authenticationRequest = new RestAuthenticationToken(tokenValue)
                RestAuthenticationToken authenticationResult = restAuthenticationProvider.authenticate(authenticationRequest)

                if (authenticationResult.authenticated) {
                    log.debug "Token authenticated. Storing the authentication result in the security context"
                    log.debug "Authentication result: ${authenticationResult}"
                    SecurityContextHolder.context.setAuthentication(authenticationResult)

                    processFilterChain(request, response, chain, tokenValue, authenticationResult)
                }

            } catch (AuthenticationException ae) {
                log.debug "Authentication failed: ${ae.message}"
                log.debug "Continuing Filter..."
                // authenticationFailureHandler.onAuthenticationFailure(request, response, ae)
                chain.doFilter(request, response)
            }
        } else {
            log.debug "Token not found"
            processFilterChain(request, response, chain, tokenValue, null)
        }

    }

    private processFilterChain(ServletRequest request, ServletResponse response, FilterChain chain, String tokenValue, RestAuthenticationToken authenticationResult) {
        HttpServletRequest servletRequest = request

        def actualUri =  servletRequest.requestURI - servletRequest.contextPath
        logger.debug "Actual URI is ${actualUri}; validate endpoint URL is ${endpointUrl}"

        if (actualUri == endpointUrl) {
            log.debug "Validate endpoint has been called. Not processing the filter chain"
            if (!tokenValue) {
                HttpServletResponse servletResponse = response
                log.debug "Token header is missing. Sending a 400 Bad Request response"
                servletResponse.sendError HttpServletResponse.SC_BAD_REQUEST, "Token header is missing"
            } else {
                authenticationSuccessHandler.onAuthenticationSuccess(request, response, authenticationResult)
            }
        } else {
            log.debug "Continuing the filter chain"
            chain.doFilter(request, response)
        }

    }
}
